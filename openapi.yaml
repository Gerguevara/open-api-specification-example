openapi: 3.1.1
info:
  title: Api first
  description: A sample API to illustrate OpenAPI concepts
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1
    description: Local server
  - url: http://localhost:3000/v2
    description: Local server
components:
  schemas:
    Greeting:
      type: object
      properties:
        message:
          type: string
          example: Hello, World!
      required:
        - message
    Products:
        type: object
        properties:
          name:
            type: string
            example: Product 1
            minLength: 2
          price:
            type: number
            format: float
            example: 19.99
            minimum: 0
          category:
            type: string
            example: Electronics 
            enum: [Electronics, Clothing, Home, Beauty, Sports]
          tags:
            type: array
            items:
              type: string
            example: ["tag1", "tag2"]
          inStock:
            type: boolean
            example: true
          specifications:
            type: object
            additionalProperties:
              type: string
            example: {"color": "red", "size": "M"}
          ratings:
            type: array
            items:
              type: integer
              minimum: 1
              maximum: 5
            example: [5, 4, 3]
          
          id:
            type: integer
            example: 1
        required:
          - name
          - price
          - category
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: johndoe
          minLength: 2
        email:
          type: string
          format: email
          example: demo@gmail.com
        age:
          type: integer
          example: 30
          minimum: 0
      required:
        - name
        - email
        - age
    UserInput:
      type: object
      properties:
        name:
          type: string
          example: johndoe
          minLength: 2
        email:
          type: string
          format: email
          example: demo@gmail.com
        age:
          type: integer
          example: 30
          minimum: 0
      required:
        - name
        - email
        - age
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: johndoe
          minLength: 2
        email:
          type: string
          format: email
          example: demo@gmail.com
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
paths:
  /hello:
    get:
      summary: Returns a greeting message
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Greeting'
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid user data
  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid user ID
        '404':
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: User not found
    put:
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid user data
        '404':
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: User not found
    delete:
      summary: Delete user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid user ID
        '404':
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: User not found
  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid product data
  /products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Product not found
    put:
      summary: Update product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid product data
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Product not found
    delete:
      summary: Delete product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Product not found
