openapi: 3.1.1
info:
  title: Api first
  description: |-
    This is a sample FakeAPI Store Server based on the OpenAPI 3.X specification. You can find out more about Swagger at https://swagger.io. In the third iteration of the pet store, we've switched to the design first approach. You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
    
    Some useful links:
    - [The Fake Store repository](https://github.com/Gerguevara/open-api-specification-example)
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: API Support
    email: support@example.com
    url: https://example.com/support
tags:
  - name: Hello
    description: Greeting operations
  - name: Auth
    description: Authentication operations
  - name: Users
    description: Operations about users
  - name: Products
    description: Operations about products
servers:
  - url: http://localhost:3000/v1
    description: Local server
  - url: http://localhost:3000/v2
    description: Local server
components:
  schemas:
    Greeting:
      type: object
      properties:
        message:
          type: string
          example: Hello, World!
      required:
        - message
    Products:
        type: object
        properties:
          name:
            type: string
            example: Product 1
            minLength: 2
          price:
            type: number
            format: float
            example: 19.99
            minimum: 0
          category:
            type: string
            example: Electronics 
            enum: [Electronics, Clothing, Home, Beauty, Sports]
          tags:
            type: array
            items:
              type: string
            example: ["tag1", "tag2"]
          inStock:
            type: boolean
            example: true
          specifications:
            type: object
            additionalProperties:
              type: string
            example: {"color": "red", "size": "M"}
          ratings:
            type: array
            items:
              type: integer
              minimum: 1
              maximum: 5
            example: [5, 4, 3]
          
          id:
            type: integer
            example: 1
        required:
          - name
          - price
          - category
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: johndoe
          minLength: 2
        email:
          type: string
          format: email
          example: demo@gmail.com
        age:
          type: integer
          example: 30
          minimum: 0
      required:
        - name
        - email
        - age
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: demo@gmail.com
        password:
          type: string
          example: password123
          minLength: 6
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/User'
      required:
        - token
        - user
    UserInput:
      type: object
      properties:
        name:
          type: string
          example: johndoe
          minLength: 2
        email:
          type: string
          format: email
          example: demo@gmail.com
        age:
          type: integer
          example: 30
          minimum: 0
      required:
        - name
        - email
        - age
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: johndoe
          minLength: 2
        email:
          type: string
          format: email
          example: demo@gmail.com
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
  securitySchemes:
   JWT:
     type: http
     scheme: bearer
     bearerFormat: JWT
     description: JSON Web Token authentication
security:
  - JWT: []
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate user and return JWT token
      security: []  # This endpoint doesn't require authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid email or password
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Email and password are required
  /hello:
    get:
      tags:
        - Hello
      summary: Returns a greeting message
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Greeting'
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid user data
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid user ID
        '404':
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: User not found
    put:
      tags:
        - Users
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid user data
        '404':
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: User not found
    delete:
      tags:
        - Users
      summary: Delete user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid user ID
        '404':
          description: User not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: User not found
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
    post:
      tags:
        - Products
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid product data
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Product not found
    put:
      tags:
        - Products
      summary: Update product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Invalid product data
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Product not found
    delete:
      tags:
        - Products
      summary: Delete product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - example:
                      message: Product not found



# tools
# https://editor.swagger.io/